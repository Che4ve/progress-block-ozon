(function(){const t=document.createElement("link").relList;if(t&&t.supports&&t.supports("modulepreload"))return;for(const e of document.querySelectorAll('link[rel="modulepreload"]'))l(e);new MutationObserver(e=>{for(const i of e)if(i.type==="childList")for(const a of i.addedNodes)a.tagName==="LINK"&&a.rel==="modulepreload"&&l(a)}).observe(document,{childList:!0,subtree:!0});function s(e){const i={};return e.integrity&&(i.integrity=e.integrity),e.referrerPolicy&&(i.referrerPolicy=e.referrerPolicy),e.crossOrigin==="use-credentials"?i.credentials="include":e.crossOrigin==="anonymous"?i.credentials="omit":i.credentials="same-origin",i}function l(e){if(e.ep)return;e.ep=!0;const i=s(e);fetch(e.href,i)}})();class h extends HTMLElement{static get observedAttributes(){return["min","max","value"]}constructor(t,s,l){super(),this.min=t??0,this.max=s??100,this.value=l??0,this.state="normal",this.progressCircle=null,this.slider=null,this.checkboxAnimate=null,this.checkboxHide=null}connectedCallback(){this.min=this.getAttribute("min")??this.min,this.max=this.getAttribute("max")??this.max,this.value=this.getAttribute("value")??this.value,this.render(),this.progressCircle=this.querySelector("progress-circle"),this.slider=this.querySelector("custom-range-slider"),this.slider.onChange(t=>{this.value=t}),this.checkboxAnimate=this.querySelector("#custom-checkbox-animate"),this.checkboxAnimate.onChange(t=>{this.state=t?"animated":null}),this.checkboxHide=this.querySelector("#custom-checkbox-hide"),this.checkboxHide.onChange(t=>{this.state=t?"hidden":null}),this.updateProgress()}render(){this.innerHTML=`
            <div class="progress-container" id="progress-container">
                <progress-circle 
                    min="0" max="100" value="${this.value}" 
                    width="200px" 
                    stroke-width="20px"
                ></progress-circle>
                <div class="controls">
                    <div class="controls__element" id="controls__element-value">
                        <p>Value</p>
                        <custom-range-slider id="range-slider" min="0" max="100" value="${this.value}"/>
                    </div>
                    <div class="controls__element" id="controls__element-animate">
                        <p>Animate</p>
                        <custom-checkbox id="custom-checkbox-animate"/>
                    </div>
                    <div class="controls__element" id="controls__element-hide">
                        <p>Hide</p>
                        <custom-checkbox id="custom-checkbox-hide"/>
                    </div>
                </div>
            </div>
        `}updateProgress(){this.setAttribute("value",`${this.value}`),this.progressCircle&&(this.progressCircle.value=this.value),this.slider&&(this.slider.value=this.value),this.isCompleted=this.value===this.max,this.toggleCompleted(),this.isCompleted&&this.callbackComplete&&this.callbackComplete()}updateState(t){this.toggleAnimation(t),this.toggleVisibility(t)}set value(t){this._value=Math.min(Math.max(t,0),100),this.updateProgress()}get value(){return this._value}set state(t){const s=this._state;this._state=t??"normal",this.updateState(s)}get state(){return this._state}toggleAnimation(t){this.classList.toggle("animated",this.state==="animated"),this.state==="animated"&&this.callbackAnimationStart&&this.callbackAnimationStart(),t==="animated"&&this.callbackAnimationEnd&&this.callbackAnimationEnd()}toggleVisibility(t){this.classList.toggle("hidden",this.state==="hidden"),this.state==="hidden"&&this.callbackCollapse&&this.callbackCollapse(),t==="hidden"&&this.callbackExpand&&this.callbackExpand()}toggleCompleted(){this.classList.toggle("completed",this.isCompleted),this.isCompleted&&this.callbackCollapse&&this.callbackComplete()}onAnimationStart(t){this.callbackAnimationStart=t}onAnimationEnd(t){this.callbackAnimationEnd=t}onComplete(t){this.callbackComplete=t}onCollapse(t){this.callbackCollapse=t}onExpand(t){this.callbackExpand=t}}customElements.get("progress-block")||customElements.define("progress-block",h);class o extends HTMLElement{static get observedAttributes(){return["min","max","value"]}constructor(t,s,l){super(),this.min=t??0,this.max=s??100,this.value=l??0,this.isCompleted=!1,this.changeCallback=()=>{},this.innerElement=null}connectedCallback(){this.min=this.getAttribute("min")??this.min,this.max=this.getAttribute("max")??this.max,this.value=this.getAttribute("value")??this.value,this.render(),this.innerElement=this.querySelector('input[type="range"]'),this.innerElement.addEventListener("input",t=>{this.value=Number(t.target.value),this.changeCallback(this.value)})}render(){this.innerHTML=`
            <input type="range" id="value-input" min="${this.min}" max="${this.max}" value="${this.value}">
        `}updateValue(){this.setAttribute("value",`${this.value}`);const t=this.value/this.max*100;this.innerElement&&(this.innerElement.setAttribute("value",`${this.value}`),this.innerElement.style.setProperty("--offset",`${t}`)),this.isCompleted=this.value===this.max}set value(t){this._value=Math.min(Math.max(t,this.min),this.max),this.updateValue()}get value(){return this._value}onChange(t){this.changeCallback=t}}customElements.get("custom-range-slider")||customElements.define("custom-range-slider",o);class c extends HTMLElement{static get observedAttributes(){return["checked"]}constructor(t=!1){super(),this.checked=t,this.changeCallback=()=>{},this.innerElement=null}connectedCallback(){const t=this.getAttribute("checked");this.checked=t!==null,this.render(),this.innerElement=this.querySelector("input"),this.innerElement.checked=this.checked,this.innerElement.addEventListener("change",s=>{this.checked=s.target.checked,this.changeCallback(this.checked)})}render(){this.innerHTML=`
            <input type="checkbox" ${this.checked?"checked":""}>
        `}updateValue(){this.checked?this.setAttribute("checked",""):this.removeAttribute("checked"),this.innerElement&&(this.innerElement.checked=this.checked)}set checked(t){this._checked=!!t,this.updateValue()}get checked(){return this._checked}onChange(t){this.changeCallback=t}}customElements.get("custom-checkbox")||customElements.define("custom-checkbox",c);class d extends HTMLElement{static get observedAttributes(){return["min","max","value","width","stroke-width","color-start","color-end"]}constructor(t,s,l,e,i,a,u){super(),this.min=t??0,this.max=s??100,this.value=l??0,this.width=e??200,this.strokeWidth=i??20,this.colorStart=a??"#0a74ff",this.colorEnd=u??"#1100ff"}connectedCallback(){this.min=this.getAttribute("min")??this.min,this.max=this.getAttribute("max")??this.max,this.value=this.getAttribute("value")??this.value,this.width=this.getAttribute("width")??this.width,this.strokeWidth=this.getAttribute("stroke-width")??this.strokeWidth,this.colorStart=this.getAttribute("color-start")??this.colorStart,this.colorEnd=this.getAttribute("color-end")??this.colorEnd,this.render(),this.progressTextDiv=this.querySelector("div"),this.updateValue()}render(){this.innerHTML=`
            <svg class="progress-circle__svg" fill="none" xmlns="http://www.w3.org/2000/svg">
                <defs>
                    <linearGradient id="GradientColor">
                        <stop offset="0%" stop-color="${this.colorStart}"/>
                        <stop offset="100%" stop-color="${this.colorEnd}"/>
                    </linearGradient>
                </defs>
                <circle cx="50%" cy="50%" stroke-linecap="round"></circle>
            </svg>
            <div class="progress-circle__percentage" id="progress__percentage">0%</div>
        `}updateValue(){this.setAttribute("value",`${this.value}`),this.style.setProperty("--width",`${this.width}px`),this.style.setProperty("--stroke-width",`${this.strokeWidth}px`),this.style.setProperty("--percentage",`${this.value/this.max*100}`),this.querySelectorAll("*").forEach(t=>{t.style.setProperty("--width",`${this.width}px`),t.style.setProperty("--stroke-width",`${this.strokeWidth}px`),t.style.setProperty("--percentage",`${this.value/this.max*100}`)}),this.progressTextDiv&&(this.progressTextDiv.innerText=`${this.value}%`)}set value(t){this._value=t,this.updateValue()}get value(){return this._value}}customElements.get("progress-circle")||customElements.define("progress-circle",d);const r=new h;new o;new c;new d(0,10,5);r.value=37;document.body.append(r);r.onAnimationStart(()=>{console.log("Animation started")});r.onAnimationEnd(()=>{console.log("Animation ended")});r.onComplete(()=>{console.log("Success!")});r.onCollapse(()=>{console.log("Hidden")});r.onExpand(()=>{console.log("Expanded")});
